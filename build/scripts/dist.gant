/*
 * Copyright 2000-2015 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import org.apache.tools.ant.BuildException
import org.jetbrains.jps.gant.LayoutInfo

import static org.jetbrains.jps.idea.IdeaProjectLoader.guessHome

includeTargets << new File("${guessHome(this)}/build/scripts/utils.gant")

requireProperty("out", "$home/out")
requireProperty("buildNumber", "SNAPSHOT")

// "out" has to be canonical, otherwise the ant build fails
// with mysterious errors
out = new File(out).getCanonicalPath()
setProperty("out", out)

class Paths {
  final sandbox
  final distWin
  final distAll
  final distUnix
  final distMac
  final artifacts
  final artifacts_core
  final artifacts_jps
  final ideaSystem
  final ideaConfig

  def Paths(String out) {
    sandbox = out
    distWin = "$sandbox/dist.win.ce"
    distAll = "$sandbox/dist.all.ce"
    distUnix = "$sandbox/dist.unix.ce"
    distMac = "$sandbox/dist.mac.ce"
    artifacts = "$sandbox/artifacts"
    artifacts_core = "$artifacts/core"
    artifacts_jps = "$artifacts/jps"
    ideaSystem = "$sandbox/system"
    ideaConfig = "$sandbox/config"
  }
}

def paths = new Paths(out)
setProperty("paths", paths)

def productPropertiesPath = "$home/build/scripts/" + p("product") + "_properties.gant"
if (!new File(productPropertiesPath).exists()) {
  throw new BuildException("No product specific properties file found at: " + productPropertiesPath)
}
def productProperties = includeFile(productPropertiesPath).getProperties(guessHome(this))
setProperty("pp", productProperties)

setProperty("maySkipAndroidPlugin", pp("maySkipAndroidPlugin"))

target(compile: "Compile project") {
  loadProject()

  projectBuilder.stage("Cleaning up sandbox folder")
  forceDelete(paths.sandbox)

  [paths.sandbox, paths.distWin, paths.distAll, paths.distUnix, paths.distMac, paths.artifacts, paths.artifacts_core, paths.artifacts_jps].each {
    ant.mkdir(dir: it)
  }

  projectBuilder.targetFolder = "$out/classes"
  projectBuilder.cleanOutput()
  projectBuilder.buildProduction()
  projectBuilder.makeModuleTests(findModule("jps-builders"))
}

private String appInfoFile() {
  return pp("appInfoFile")()
}

target('default': 'The default target') {
  depends([compile])

  // load ApplicationInfo.xml properties
  ant.xmlproperty(file: appInfoFile(), collapseAttributes: "true")

  zipSources(home, paths.artifacts)

  indexSearchableOptions()

  layoutAll([buildNumber: pp("buildNumber"),
             system_selector: pp("systemSelector")(),
             platform_prefix: pp("platformPrefix"),
             ide_jvm_args: pp("ideJvmArgs"),
             tools_jar: true],
            home, null, paths, true)
  String archiveName = pp("archiveName")()
  String macZip = "$paths.artifacts/${archiveName}.mac.zip"
  notifyArtifactBuilt(macZip)

  if (pp("buildUpdater")) {
    // Generate updater.jar from the updater module (patch updater)
    layoutUpdater(out)
  }
}

target('build-dist-jars' : 'Target to build jars from locally compiled classes') {
  loadProject()

  // load ApplicationInfo.xml properties
  ant.xmlproperty(file: appInfoFile(), collapseAttributes: "true")

  indexSearchableOptions()

  layoutAll([buildNumber: pp("buildNumber"),
             system_selector: pp("systemSelector")(),
             platform_prefix: pp("platformPrefix"),
             ide_jvm_args: pp("ideJvmArgs"),
             tools_jar: true],
             home, null, paths)
  String macZipPrefix = pp("prefix") + pp("buildNumber")
  String macZip = "$paths.artifacts/${macZipPrefix}.mac.zip"
  notifyArtifactBuilt(macZip)
}

private void indexSearchableOptions() {
  buildSearchableOptions("${projectBuilder.moduleOutput(findModule("resources-en"))}/search", [], {
    ant.pathelement(location: "$jdkHome/lib/tools.jar")
    ant.pathelement(location: "$home/lib/junit.jar")
    projectBuilder.moduleRuntimeClasspath(findModule("community-main"), false).each {
      ant.pathelement(location: it)
    }
  })
}

def layoutAll(Map args, String home, String out, Paths _paths = null, buildJps = false) {
  Paths paths = _paths != null ? _paths : new Paths(out)

  wireBuildDate(args.buildNumber, appInfoFile())
  ant.echo(message: args.buildNumber, file: "$paths.distAll/build.txt")

  def layouts = includeFile("$home/build/scripts/layouts.gant")
  LayoutInfo info = layouts.layoutFull(home, paths.distAll, null)
  layouts.layout_core(home, paths.artifacts_core)
  notifyArtifactBuilt(paths.artifacts_core)
  if (buildJps) {
    layouts.layoutJps(home, paths.artifacts_jps, args.buildNumber, {})
    notifyArtifactBuilt(paths.artifacts_jps)
  }

  layout(paths.distAll) {
    dir("bin") {
      fileset(dir: "${home}/bin") {
        include(name: "*.*")
      }
    }
    dir("license") {
      fileset(dir: "${home}/license")
    }
    fileset(file: "${home}/LICENSE.txt")
    fileset(file: "${home}/NOTICE.txt")
  }
  patchPropertiesFile(paths.distAll, args + [appendices: ["$home/build/conf/ideaCE.properties"]])

  layoutWin(args, home, paths)
  layoutMac(args, home, paths)
  layoutUnix(args, home, paths)

  def macAppRoot = pp("macAppRoot")()
  def winAppRoot = pp("winAppRoot")()
  def linAppRoot = pp("linAppRoot")()
  def archiveName = pp("archiveName")()

  buildWinZip(winAppRoot, "$paths.artifacts/${archiveName}.win.zip", [paths.distAll, paths.distWin])

  String macZip = "$paths.artifacts/${archiveName}.mac.zip"
  buildMacZip(macAppRoot, macZip, [paths.distAll], paths.distMac)

  buildTarGz(linAppRoot, "$paths.artifacts/${archiveName}.tar", [paths.distAll, paths.distUnix])
  return info
}

private layoutWin(Map args, String home, Paths paths) {
  String target = paths.distWin

  layout(target) {
    dir("bin") {
      fileset(dir: "$home/bin/win")
    }
  }

  def name = pp("prefix")
  def ico = pp("ico")

  ant.copy(file: ico, tofile: "$target/bin/${name}.ico")

  if (pp("includeBatchLauncher")) {
    winScripts(target, home, "${name}.bat", args)
  }
  winVMOptions(target, args, "${name}.exe", "${name}64.exe")
  def appInfoModulePath = pp("appInfoModulePath")

  List resourcePaths = ["$home/${appInfoModulePath}/src", "$home/platform/icons/src"]
  buildWinLauncher(home, "$home/bin/WinLauncher/WinLauncher.exe", "$target/bin/${name}.exe", appInfoFile(),
                   pp("exe_launcher_properties"), pp("exe_selector"), resourcePaths)
  buildWinLauncher(home, "$home/bin/WinLauncher/WinLauncher64.exe", "$target/bin/${name}64.exe", appInfoFile(),
                   pp("exe64_launcher_properties"), pp("exe_selector"), resourcePaths)

  pp("customWinLayout")(target, home)
}

private layoutMac(Map _args, String home, Paths paths) {
  String target = paths.distMac
  def prefix = pp("prefix")

  Map args = new HashMap(_args)
  args.bundleIdentifier = pp("bundleIdentifier")
  args.doc_types = """
      <dict>
        <key>CFBundleTypeExtensions</key>
        <array>
          <string>ipr</string>
        </array>
        <key>CFBundleTypeIconFile</key>
        <string>${prefix}.icns</string>
        <key>CFBundleTypeName</key>
        <string>IntelliJ IDEA Project File</string>
        <key>CFBundleTypeRole</key>
        <string>Editor</string>
      </dict>
"""
  args."idea.properties.path" = "${paths.distAll}/bin/idea.properties"
  args.urlSchemes = ["idea"]
  args.mac_no_yjp = true
  args.executable = prefix
  args.icns = pp("icns")
  layoutMacApp(target, home, args)
  pp("customMacLayout")(target, home)
}

private layoutUnix(Map args, String home, Paths paths) {
  String target = paths.distUnix

  layout(target) {
    dir("bin") {
      fileset(dir: "$home/bin/linux")
    }
  }

  def name = pp("prefix")
  def icon128 = pp("icon128")
  def ico = pp("ico")

  ant.copy(file: icon128, tofile: "$target/bin/${name}.png")
  ant.copy(file: ico, tofile: "$target/bin/${name}.ico")

  unixScripts(target, home, "${name}.sh", args)
  unixVMOptions(target, "${name}")
  unixReadme(target, home, args)
  pp("customLinLayout")(target, home)
}
